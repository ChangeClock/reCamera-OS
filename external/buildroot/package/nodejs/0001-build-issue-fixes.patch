From 063a8ec67d496543d47f71d265f2a924b4425c79 Mon Sep 17 00:00:00 2001
From: Ang Chee Hong <cheehong.ang@starfivetech.com>
Date: Thu, 28 Oct 2021 19:46:35 +0800
Subject: [PATCH] Build issue fixes: - Pass the correct data type to template
 parameter to avoid template   ambiguity issue - C++ standard does not allow
 explicit specialization of a   member of a class at class scope. Move the
 struct specialization   outside of the class

---
 .../src/builtins/riscv64/builtins-riscv64.cc  |  2 +-
 .../src/execution/riscv64/simulator-riscv64.h | 98 ++++++++++---------
 2 files changed, 51 insertions(+), 49 deletions(-)

diff --git a/deps/v8/src/builtins/riscv64/builtins-riscv64.cc b/deps/v8/src/builtins/riscv64/builtins-riscv64.cc
index c90352bea1..dd6e7bb1a3 100644
--- a/deps/v8/src/builtins/riscv64/builtins-riscv64.cc
+++ b/deps/v8/src/builtins/riscv64/builtins-riscv64.cc
@@ -3851,7 +3851,7 @@ void Builtins::Generate_DynamicCheckMapsTrampoline(
 
   Label deopt, bailout;
   __ Branch(&deopt, ne, a0,
-            Operand(static_cast<int>(DynamicCheckMapsStatus::kSuccess)),
+            Operand(static_cast<int64_t>(DynamicCheckMapsStatus::kSuccess)),
             Label::Distance::kNear);
 
   __ MaybeRestoreRegisters(registers);
diff --git a/deps/v8/src/execution/riscv64/simulator-riscv64.h b/deps/v8/src/execution/riscv64/simulator-riscv64.h
index 90f0edec4c..da0481543f 100644
--- a/deps/v8/src/execution/riscv64/simulator-riscv64.h
+++ b/deps/v8/src/execution/riscv64/simulator-riscv64.h
@@ -668,58 +668,10 @@ class Simulator : public SimulatorBase {
   // MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
   template <uint64_t N>
   struct type_usew_t;
-  template <>
-  struct type_usew_t<8> {
-    using type = uint8_t;
-  };
-
-  template <>
-  struct type_usew_t<16> {
-    using type = uint16_t;
-  };
-
-  template <>
-  struct type_usew_t<32> {
-    using type = uint32_t;
-  };
-
-  template <>
-  struct type_usew_t<64> {
-    using type = uint64_t;
-  };
 
-  template <>
-  struct type_usew_t<128> {
-    using type = __uint128_t;
-  };
   template <uint64_t N>
   struct type_sew_t;
 
-  template <>
-  struct type_sew_t<8> {
-    using type = int8_t;
-  };
-
-  template <>
-  struct type_sew_t<16> {
-    using type = int16_t;
-  };
-
-  template <>
-  struct type_sew_t<32> {
-    using type = int32_t;
-  };
-
-  template <>
-  struct type_sew_t<64> {
-    using type = int64_t;
-  };
-
-  template <>
-  struct type_sew_t<128> {
-    using type = __int128_t;
-  };
-
 #define VV_PARAMS(x)                                                       \
   type_sew_t<x>::type& vd =                                                \
       Rvvelt<type_sew_t<x>::type>(rvv_vd_reg(), i, true);                  \
@@ -1149,6 +1101,56 @@ class Simulator : public SimulatorBase {
   LocalMonitor local_monitor_;
   GlobalMonitor::LinkedAddress global_monitor_thread_;
 };
+  template <>
+  struct Simulator::type_usew_t<8> {
+    using type = uint8_t;
+  };
+
+  template <>
+  struct Simulator::type_usew_t<16> {
+    using type = uint16_t;
+  };
+
+  template <>
+  struct Simulator::type_usew_t<32> {
+    using type = uint32_t;
+  };
+
+  template <>
+  struct Simulator::type_usew_t<64> {
+    using type = uint64_t;
+  };
+
+  template <>
+  struct Simulator::type_usew_t<128> {
+    using type = __uint128_t;
+  };
+
+  template <>
+  struct Simulator::type_sew_t<8> {
+    using type = int8_t;
+  };
+
+  template <>
+  struct Simulator::type_sew_t<16> {
+    using type = int16_t;
+  };
+
+  template <>
+  struct Simulator::type_sew_t<32> {
+    using type = int32_t;
+  };
+
+  template <>
+  struct Simulator::type_sew_t<64> {
+    using type = int64_t;
+  };
+
+  template <>
+  struct Simulator::type_sew_t<128> {
+    using type = __int128_t;
+  };
+
 }  // namespace internal
 }  // namespace v8
 
-- 
2.17.1

